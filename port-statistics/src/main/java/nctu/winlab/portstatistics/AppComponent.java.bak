/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nctu.winlab.portstatistics;

import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Deactivate;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.ReferenceCardinality;
import org.apache.felix.scr.annotations.Service;
import org.onosproject.net.Device;
import org.onosproject.net.Port;
import org.onosproject.net.device.DeviceService;
import org.onosproject.net.device.PortStatistics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Iterator;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Skeletal ONOS application component.
 */
@Component(immediate = true)
public class AppComponent {

    private final Logger log = LoggerFactory.getLogger(getClass());

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected DeviceService deviceService;

    @Activate
    protected void activate() {
        log.info("Started");

        getPortStats();
    }

    @Deactivate
    protected void deactivate() {
        log.info("Stopped");
    }

    protected void getPortStats() {
        Iterable<Device> devices = deviceService.getDevices();

        for(Device d : devices) {
            log.info("### Device id " + d.id().toString());

            List<Port> ports = deviceService.getPorts(d.id());
            for(Port p : ports) {
                log.info("Getting info for port " + p.number());

                PortStatistics portStat = deviceService.getStatisticsForPort(d.id(), p.number());
                PortStatistics portDeltaStat = deviceService.getDeltaStatisticsForPort(d.id(), p.number());

                if(portStat != null)
                    log.info("portStat bytes received " + portStat.bytesReceived());
                else
                    log.info("Unable to read portStat");

                if(portDeltaStat != null)
                    log.info("portDeltaStat bytes received " + portDeltaStat.bytesReceived());
                else
                    log.info("Unable to read portDeltaStats");
            }
        }
    }

}
